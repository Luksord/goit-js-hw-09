{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAIA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAXAQ,SAASC,cAAc,SAe/BC,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,MAAMC,EAASC,SAASN,SAASC,cAAc,wBAAwBM,OACjEC,EAAQF,SAASN,SAASC,cAAc,uBAAuBM,OAC/DE,EAAOH,SAASN,SAASC,cAAc,sBAAsBM,OAEnE,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAQK,IAAK,CAI/BpB,EAHiBoB,EAAI,EACDF,EAAQC,EAAOC,GAGhCC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MACjBoB,EAAAxB,GAASyB,OAAOC,QACd,uBAAqBvB,QAAiBC,MAAU,IAGnDuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBoB,EAAAxB,GAASyB,OAAOG,QACd,sBAAoBzB,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const amount = parseInt(document.querySelector('input[name=\"amount\"]').value);\n  const delay = parseInt(document.querySelector('input[name=\"delay\"]').value);\n  const step = parseInt(document.querySelector('input[name=\"step\"]').value);\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const actualDelay = delay + step * i;\n\n    createPromise(position, actualDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\n/* \n\n//---------------Natalia\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const delay = document.querySelector(\"[name='delay']\");\n  const step = document.querySelector(\"[name='step']\");\n  const amount = document.querySelector(\"[name='amount']\");\n  let createdPromises = 0;\n\n  const timerId = setInterval(() => {\n    if (createdPromises >= amount.value) {\n      clearInterval(timerId);\n      return;\n    }\n    createPromise(createdPromises + 1, delay.value)\n      .then(resolved => Notiflix.Notify.success(resolved))\n      .catch(rejected => Notiflix.Notify.failure(rejected));\n    createdPromises++;\n  }, step.value);\n});\n\n*/\n\n/* \n\n//---------------Molik\n\nconst form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const amount = parseInt(document.querySelector('input[name=\"amount\"]').value);\n  const delay = parseInt(document.querySelector('input[name=\"delay\"]').value);\n  const step = parseInt(document.querySelector('input[name=\"step\"]').value);\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const actualDelay = delay + step * i;\n\n    createPromise(position, actualDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\n*/\n\n/* \nfunction generateRandomColor() {\n  const r = Math.floor(Math.random() * 256); // Składowa czerwona (0-255)\n  const g = Math.floor(Math.random() * 256); // Składowa zielona (0-255)\n  const b = Math.floor(Math.random() * 256); // Składowa niebieska (0-255)\n  return `rgb(${r},${g},${b})`; // Format RGB\n}\n\nfunction updateBackgroundColor() {\n  const color1 = generateRandomColor();\n  const color2 = generateRandomColor();\n  document.body.style.background = `linear-gradient(to right, ${color1}, ${color2})`;\n}\n\n// Aktualizacja tła co sekundę\nsetInterval(updateBackgroundColor, 1000);\n\n*/\n"],"names":["$1GAPJ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","amount","parseInt","value","delay1","step","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.14993942.js.map"}